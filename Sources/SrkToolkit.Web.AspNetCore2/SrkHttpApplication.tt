<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tt.cs" #>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#

var eventsString = 
@"Application_Start                    | Called when the first resource (such as a page) in an ASP.NET application is requested. The Application_Start method is called only one time during the life cycle of an application. You can use this method to perform startup tasks such as loading data into the cache and initializing static values.
Application_End                        | Called once per lifetime of the application before the application is unloaded. 
Application_Init                       | Called once for every instance of the HttpApplication class after all modules have been created.
Application_BeginRequest			   | Occurs as the first event in the HTTP pipeline chain of execution when ASP.NET responds to a request.
Application_AuthenticateRequest		   | Occurs when a security module has established the identity of the user.
Application_PostAuthenticateRequest	   | Occurs when a security module has established the identity of the user.
Application_AuthorizeRequest		   | Occurs when a security module has verified user authorization.
Application_PostAuthorizeRequest	   | Occurs when the user for the current request has been authorized.
Application_ResolveRequestCache		   | Occurs when ASP.NET finishes an authorization event to let the caching modules serve requests from the cache, bypassing execution of the event handler (for example, a page or an XML Web service).
Application_PostResolveRequestCache	   | Occurs when ASP.NET bypasses execution of the current event handler and allows a caching module to serve a request from the cache.
Application_MapRequestHandler		   | Infrastructure. Occurs when the handler is selected to respond to the request.
Application_PostMapRequestHandler	   | Occurs when ASP.NET has mapped the current request to the appropriate event handler.
Application_AcquireRequestState		   | Occurs when ASP.NET acquires the current state (for example, session state) that is associated with the current request.
Application_PostAcquireRequestState	   | Occurs when the request state (for example, session state) that is associated with the current request has been obtained.
Application_PreRequestHandlerExecute   | Occurs just before ASP.NET starts executing an event handler (for example, a page or an XML Web service).
Application_PostRequestHandlerExecute  | Occurs when the ASP.NET event handler (for example, a page or an XML Web service) finishes execution.
Application_ReleaseRequestState		   | Occurs after ASP.NET finishes executing all request event handlers. This event causes state modules to save the current state data.
Application_PostReleaseRequestState	   | Occurs when ASP.NET has completed executing all request event handlers and the request state data has been stored.
Application_UpdateRequestCache		   | Occurs when ASP.NET finishes executing an event handler in order to let caching modules store responses that will be used to serve subsequent requests from the cache.
Application_PostUpdateRequestCache	   | Occurs when ASP.NET finishes updating caching modules and storing responses that are used to serve subsequent requests from the cache.
Application_LogRequest				   | Occurs just before ASP.NET performs any logging for the current request.
Application_PostLogRequest			   | Occurs when ASP.NET has completed processing all the event handlers for the LogRequest event.
Application_EndRequest				   | Occurs as the last event in the HTTP pipeline chain of execution when ASP.NET responds to a request.
Application_PreSendRequestHeaders	   | Occurs just before ASP.NET sends HTTP headers to the client.
Application_PreSendRequestContent      | Occurs just before ASP.NET sends content to the client.
Application_Disposed                   | Occurs when the application is disposed.
Application_Error                      | Occurs when an unhandled exception is thrown.
Session_Start              | The Session_OnStart event is used to perform any initialization work for a session such as setting up default values for session variables.
Session_End                | The Session_OnEnd event is used to perform any cleanup work for a session such as disposing of resources used by the session.";
var events = eventsString
	.Split(new string[] { "\r\n", }, StringSplitOptions.RemoveEmptyEntries)
	.Select(x => x.Split('|').Select(s => s.Trim()).ToArray())
	.ToArray();

#>

namespace SrkToolkit.Web
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Web;

    public partial class SrkHttpApplication : HttpApplication
    {<#

foreach (var line in events)
{
	var name = line[0];
	var desc = line[1];
#>

        /// <summary>
        /// <#= desc #>
        /// </summary>
        public virtual void <#= name #>(object sender, EventArgs e) { }
<#
}
#>
    }
}
